//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(schema_name = "usr", table_name = "usr_info")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,

    pub name: String,

    #[sea_orm(unique)]
    pub email: Option<String>,

    #[sea_orm(unique)]
    pub phone: Option<String>,

    #[serde(skip)]
    pub salt: String,

    #[sea_orm(column_type = "Text")]
    #[serde(skip)]
    pub passwd_hash: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_one = "super::user_profiles::Entity")]
    UserProfiles,
}

impl Related<super::user_profiles::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserProfiles.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
